import time
from datetime import datetime


def mergeSort(array):
    
    if len(array)>1:
        mid = len(array)//2
        lefthalf = array[:mid]
        righthalf = array[mid:]

        mergeSort(lefthalf)
        mergeSort(righthalf)

        i=0
        j=0
        k=0
        while i<len(lefthalf) and j<len(righthalf):
            if lefthalf[i]<righthalf[j]:
                array[k]=lefthalf[i]
                i=i+1
            else:
                array[k]=righthalf[j]
                j=j+1
            k=k+1

        while i<len(lefthalf):
            array[k]=lefthalf[i]
            i=i+1
            k=k+1

        while j<len(righthalf):
            array[k]=righthalf[j]
            j=j+1
            k=k+1


def make_heap(array, n, i): 
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2

    if l < n and array[largest] < array[l]: 
        largest = l 

    if r < n and array[largest] < array[r]: 
        largest = r 

    if largest != i: 
        array[i],array[largest] = array[largest],array[i]

        make_heap(array, n, largest) 


def heap_sort(array): 
    n = len(array) 

    for i in range(n, -1, -1): 
        make_heap(array, n, i) 

    for i in range(n-1, 0, -1): 
        array[i], array[0] = array[0], array[i]
        make_heap(array, i, 0)



def partition(array, low, high): 
    i = (low - 1)
    pivot = array[high]

    for j in range(low, high):
        if array[j] <= pivot:  
            i = i + 1 
            array[i], array[j] = array[j], array[i] 

    array[i+1], array[high] = array[high], array[i+1] 
    return (i + 1) 

def quick_sort(arr, low, high): 
    if low < high: 
        pi = partition(arr, low, high) 
        quick_sort(arr, low, pi - 1) 
        quick_sort(arr, pi + 1, high)


file = open("ai183.txt", "r")
someArray = []

firstTestCheck = False
secondTestCheck = False

while True:
    check = file.read(1)
    if not check:
        break

    if check == "1":
        check = file.read(1)
        if check == '0':
            firstTestCheck = True
            check = file.read(1)
            if check == ":":
                secondTestCheck = True

    if firstTestCheck == True and secondTestCheck == True:
        file.seek(file.tell() + 1)
        check = file.read(1)
        while check != "}":
            someArray.append(int(check))
            check = file.read(1)
        break


#Merge sort
#Average duration: 0:00:00.0001005
array = someArray
start_time = datetime.now()
mergeSort(array)
end_time = datetime.now()
print("Merge sort: " + str(array) + "\n" + 'Duration: {}'.format(end_time - start_time) + "\n")

#Heap sort
#Average duration: 0:00:00.0001019
array = someArray
start_time = datetime.now()
heap_sort(array)
end_time = datetime.now()
print("Heap sort: " + str(array) + "\n" + 'Duration: {}'.format(end_time - start_time) + "\n")

#Quick sort
#Average duration: 0:00:00.001000
array = someArray
start_time = datetime.now()
quick_sort(array, 0, len(array) - 1)
end_time = datetime.now()
print("Quick sort: " + str(array) + "\n" + 'Duration: {}'.format(end_time - start_time) + "\n")
